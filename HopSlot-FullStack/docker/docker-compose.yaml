name: hopslot-docker-compose
services:
  ### DATABASES ###
  redis:
    container_name: redis-scheduler-queue
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - ./bind-mounts/redis-bind-mount:/data
    networks:
      - hopslot-network
  pg-db:
    image: postgres:16
    container_name: hopslot-pg-db
    ports:
      - 5432:5432
    env_file:
      - ./env/pg.local.env
    volumes:
      - ./bind-mounts/postgres:/var/lib/postgresql/data
    networks:
      - hopslot-network
  ## MONGO CLUSTER ##
  mongo-helper:
    image: mongo:latest
    container_name: hopslot-mongo-helper
    command: "mongosh hopslot-mongo-db --host mongo-db-primary:27017 --file /init-files/mongo-init-2.js"
    healthcheck:
      test: "mongosh hopslot-mongo-db --host mongo-db-primary:27017 --file /init-files/mongo-init-2.js | grep 'OK!"
      interval: 10s
      timeout: 1ms
      retries: 5
      start_period: 20s
    depends_on:
      mongo-db-primary:
        condition: service_healthy
      mongo-db-secondary-1:
        condition: service_started
      mongo-db-secondary-2:
        condition: service_started
    networks:
      - hopslot-network
    volumes:
      - ./init-files:/init-files:ro
  mongo-db-primary:
    image: mongo:latest
    container_name: hopslot-mongo-db-primary
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo-db-primary:27017',priority:1},{_id:1,host:'mongo-db-secondary-1:27018',priority:0.5},{_id:2,host:'mongo-db-secondary-2:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet | sleep 30 | echo "rs.status()" | mongosh --port 27017 --quiet
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 2m
    ports:
      - 27017:27017
    env_file:
      - ./env/mongo.local.env
    restart: always
    volumes:
      - ./bind-mounts/mongo/mongo-primary-1/data:/data/db
      - ./bind-mounts/mongo/mongo-primary-1/config:/data/configdb
      - ./init-files:/init-files:ro
    networks:
      - hopslot-network
  mongo-db-secondary-1:
    image: mongo:latest
    container_name: hopslot-mongo-db-secondary-1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    volumes:
      - "./bind-mounts/mongo/mongo-secondary-1/data:/data/db"
      - "./bind-mounts/mongo/mongo-secondary-1/config:/data/configdb"
    networks:
      - hopslot-network
  mongo-db-secondary-2:
    image: mongo:latest
    container_name: hopslot-mongo-db-secondary-2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    volumes:
      - "./bind-mounts/mongo/mongo-secondary-2/data:/data/db"
      - "./bind-mounts/mongo/mongo-secondary-2/config:/data/configdb"
    networks:
      - hopslot-network

  ### STREAMING ###
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    env_file:
      - ./env/zookeeper.local.env
    ports:
      - 22181:2181
    volumes:
      - ./bind-mounts/zoo/data:/var/lib/zookeeper/data
      - ./bind-mounts/zoo/log:/var/lib/zookeeper/log
    networks:
      - hopslot-network
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    env_file:
      - ./env/kafka.local.env
    volumes:
      - kafa-data-1:/var/lib/kafka/data
    networks:
      - hopslot-network
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - zookeeper
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "HP-Test"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    volumes:
      - ./bind-mounts/kui/config.yaml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - hopslot-network

  ### APPS ###
  hopslot-api:
    build:
      context: ../api
      dockerfile: ./dockerfiles/api.dockerfile
    container_name: hopslot-api
    image: zerefarham/hopslot-api
    volumes:
      - ../api:/app
    ports:
      - 3000:3000
    depends_on:
      - pg-db
      - mongo-db-primary
      - redis
      - kafka
    networks:
      - hopslot-network

  hopslot-django-api:
    build:
      context: ../django-api
      dockerfile: ./dockerfiles/django.dockerfile
    container_name: hopslot-django-api
    image: zerefarham/hopslot-django-api
    ports:
      - 3001:3001
    env_file:
      - ../django-api/.env
    depends_on:
      - hopslot-api
    volumes:
      - ../django-api:/app
    networks:
      - hopslot-network

networks:
  hopslot-network:

volumes:
  kafa-data-1:
