// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/postgres/client"
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "../../src/core/schemas"
}

datasource db {
  provider = "postgresql"
  url      = env("SQL_DATABASE_URL")
}

enum Role {
  HOSP_ADMIN
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id       String  @id @default(uuid()) /// @z.string().uuid().optional()
  email    String  @unique /// @z.string().email()
  username String  @unique /// @z.string().min(5).max(10)
  password String? /// @z.password().atLeastOne('digit').atLeastOne('lowercase').atLeastOne('uppercase').min(8).max(100)

  firstName        String?
  lastName         String?
  employeeId       String?
  refreshTokenHash String?
  role             Role    @default(PATIENT) /// @z.nativeEnum(Role)

  createdAt DateTime @default(now()) /// @z.date().optional()
  updatedAt DateTime @updatedAt /// @z.date().optional()

  Hospital     Hospital[]
  Doctor       Doctor?
  Patient      Patient?
  Appointment  Appointment[]
  Prescription Prescription[]
  Report       Report[]

  @@map("users")
}

model Hospital {
  id      String  @id @default(uuid()) /// @z.string().uuid().optional()
  name    String /// @z.string().min(5).max(100)
  address String /// @z.string().min(5).max(100)
  phone   String?
  email   String? /// @z.string().email()
  website String? /// @z.string().url()

  admin   User   @relation(fields: [adminId], references: [id])
  adminId String /// @z.string().uuid()

  createdAt DateTime @default(now()) /// @z.date().optional()
  updatedAt DateTime @updatedAt /// @z.date().optional()

  Doctor       Doctor[]
  Appointment  Appointment[]
  Prescription Prescription[]
  Report       Report[]

  @@map("hospitals")
}

model Doctor {
  hospitalId String /// @z.string().uuid().optional()
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  userId String @unique /// @z.string().uuid()
  user   User   @relation(fields: [userId], references: [id])

  cabinNumber           Int
  cabinFloor            Int
  cabinLat              Decimal
  cabinLng              Decimal
  cabinAlt              Decimal
  noOfPatientsConsulted Int
  lastClockIn           DateTime?

  createdAt    DateTime       @default(now()) /// @z.date().optional()
  updatedAt    DateTime       @updatedAt /// @z.date().optional()
  Appointment  Appointment[]
  Prescription Prescription[]
  Report       Report[]

  @@map("doctors")
}

model Patient {
  userId String @unique /// @z.string().uuid().optional()
  user   User   @relation(fields: [userId], references: [id])
  age    Int

  lastAppointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId   String? /// @z.string().uuid()

  createdAt DateTime @default(now()) /// @z.date().optional()
  updatedAt DateTime @updatedAt /// @z.date().optional()

  @@map("patients")
}

model Appointment {
  id String @id @default(uuid()) /// @z.string().uuid().optional()

  hospitalId String /// @z.string().uuid()
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  doctorId String /// @z.string().uuid()
  doctor   Doctor @relation(fields: [doctorId], references: [userId])

  patientId String /// @z.string().uuid()
  patient   User   @relation(fields: [patientId], references: [id])

  appointment DateTime

  createdAt DateTime  @default(now()) /// @z.date().optional()
  updatedAt DateTime  @updatedAt /// @z.date().optional()
  Patient   Patient[]

  @@map("appointments")
}

model Prescription {
  id String @id @default(uuid()) /// @z.string().uuid().optional()

  hospitalId String /// @z.string().uuid()
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  doctorId String /// @z.string().uuid()
  doctor   Doctor @relation(fields: [doctorId], references: [userId])

  patientId String /// @z.string().uuid()
  patient   User   @relation(fields: [patientId], references: [id])

  issueDate  DateTime
  body       String /// @z.string().min(10)
  otherNotes String?
  docSign    String
  reports    String[]

  createdAt DateTime @default(now()) /// @z.date().optional()
  updatedAt DateTime @updatedAt /// @z.date().optional()
  Report    Report[]

  @@map("prescriptions")
}

model Report {
  id String @id @default(uuid()) /// @z.string().uuid().optional()

  hospitalId String /// @z.string().uuid()
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  doctorId String /// @z.string().uuid()
  doctor   Doctor @relation(fields: [doctorId], references: [userId])

  patientId String /// @z.string().uuid()
  patient   User   @relation(fields: [patientId], references: [id])

  issueDate DateTime
  signedBy  String

  prescriptionId String /// @z.string().uuid()
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])

  createdAt DateTime @default(now()) /// @z.date().optional()
  updatedAt DateTime @updatedAt /// @z.date().optional()

  @@map("reports")
}
